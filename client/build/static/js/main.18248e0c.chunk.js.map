{"version":3,"sources":["components/GameBoard.js","components/GameBoardSquare.js","components/Button.js","components/GameMessage.js","App.js","index.js"],"names":["GameBoard","props","className","GameBoardSquare","player","computer","Button","onClick","text","GameMessage","message","totalSquares","Array","fill","winLines","App","useState","boardSquares","setBoardSquares","highlightWinner","setHighlightWinner","gameMessage","setGameMessage","scores","setScores","useEffect","axios","get","then","res","console","log","data","slice","filter","square","length","post","isAITurn","matchLines","a","b","c","squareIndexes","squareValues","map","index","JSON","stringify","sort","avaiableSquares","val","playerWon","computerWon","tie","moveAITo","fillSquares","winingLines","lineBlock","lineFill","Math","ceil","random","prevScores","handleClick","style","border","color","scope","target","rel","href","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"kQAIeA,EAJG,SAACC,GACjB,OAAO,iCAAKC,UAAU,cAAiBD,KCK1BE,EANS,SAACF,GAAD,OACtB,6CAAKC,UAAU,qBAAwBD,GAAvC,aACGA,EAAMG,OAAS,IAAMH,EAAMI,SAAW,IAAM,OCUlCC,EAXA,SAACL,GACd,OACE,wBACEC,UAAU,mCACVK,QAASN,EAAMM,QAFjB,SAIGN,EAAMO,QCCEC,EARK,SAACR,GACnB,OACE,qBAAKC,UAAU,wCAAf,SACE,6BAAKD,EAAMS,a,iBCKXC,EAAe,kBAAM,IAAIC,MAAM,GAAGC,KAAK,OAEvCC,EAAW,CACf,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAkMMC,MA/Lf,WACE,MAAwCC,mBAASL,KAAjD,mBAAOM,EAAP,KAAqBC,EAArB,KACA,EAA8CF,mBAAS,IAAvD,mBAAOG,EAAP,KAAwBC,EAAxB,KACA,EAAsCJ,mBAAS,IAA/C,mBAAOK,EAAP,KAAoBC,EAApB,KACA,EAA4BN,mBAAS,CACnCZ,OAAQ,EACRC,SAAU,IAFZ,mBAAOkB,EAAP,KAAeC,EAAf,KAwIA,OAhIAC,qBAAU,WACRC,IAAMC,IAAI,gCAAgCC,MAAK,SAACC,GAC9CC,QAAQC,IAAI,UAAWF,EAAIG,KAAKC,OAAO,GAAG,GAAG7B,QAC7CoB,EAAU,CACRpB,OAAQyB,EAAIG,KAAKC,OAAO,GAAG,GAAG7B,OAC9BC,SAAUwB,EAAIG,KAAKC,OAAO,GAAG,GAAG5B,gBAGnC,IAKHoB,qBAAU,WACJR,EAAaiB,QAAO,SAACC,GAAD,OAAuB,OAAXA,KAAiBC,OAAS,IAAM,GAClEV,IAAMW,KAAK,+BAAgCd,KAE5C,CAACA,IAEJE,qBAAU,WACR,IAAMa,EACJrB,EAAaiB,QAAO,SAACC,GAAD,OAAuB,OAAXA,KAAiBC,OAAS,IAAM,EAC5DG,EAAa,SAACC,EAAGC,EAAGC,GACxB,OAAO5B,EAASoB,QAAO,SAACS,GACtB,IAAMC,EAAeD,EAAcE,KAAI,SAACC,GAAD,OAAW7B,EAAa6B,MAC/D,OACEC,KAAKC,UAAU,CAACR,EAAGC,EAAGC,GAAGO,UACzBF,KAAKC,UAAUJ,EAAaK,YAI5BC,EAAkBjC,EACrB4B,KAAI,SAACV,EAAQW,GAAT,OAA+B,OAAXX,EAAkBW,EAAQ,QAClDZ,QAAO,SAACiB,GAAD,OAAiB,OAARA,KAEbC,EAAYb,EAAW,IAAK,IAAK,KAAKH,OAAS,EAC/CiB,EAAcd,EAAW,IAAK,IAAK,KAAKH,OAAS,EACjDkB,EAAkE,IAA5DrC,EAAaiB,QAAO,SAACC,GAAD,OAAuB,OAAXA,KAAiBC,OAEvDmB,EAAW,SAACT,GAChB,IAAMU,EAAcvC,EACpBuC,EAAYV,GAAS,IACrB5B,EAAgB,YAAIsC,KAOtB,GAAIlB,EAAU,CACZ,IAAMmB,EAAclB,EAAW,IAAK,IAAK,MACzC,GAAIkB,EAAYrB,OAAS,EAKvB,YADAmB,EAHiBE,EAAY,GAAGvB,QAC9B,SAACY,GAAD,OAAmC,OAAxB7B,EAAa6B,MACxB,IAKJ,IAAMY,EAAYnB,EAAW,IAAK,IAAK,MACvC,GAAImB,EAAUtB,OAAS,EAKrB,YADAmB,EAHmBG,EAAU,GAAGxB,QAC9B,SAACY,GAAD,OAAmC,OAAxB7B,EAAa6B,MACxB,IAKJ,IAAMa,EAAWpB,EAAW,IAAK,KAAM,MACvC,GAAIoB,EAASvB,OAAS,EAEpB,YADAmB,EAASI,EAAS,GAAGzB,QAAO,SAACY,GAAD,OAAmC,OAAxB7B,EAAa6B,MAAiB,IAMvES,EADEL,EAAgBU,KAAKC,KAAKD,KAAKE,SAAWZ,EAAgBd,UAI1DgB,IACFhC,EAAmB,UACnBE,EAAe,qBACfE,GAAU,SAACuC,GAAD,mBAAC,eACNA,GADK,IAER3D,OAAQ2D,EAAW3D,OAAS,QAG5BiD,IACFjC,EAAmB,YACnBE,EAAe,sBACfE,GAAU,SAACuC,GAAD,mBAAC,eACNA,GADK,IAER1D,SAAU0D,EAAW1D,SAAW,QAGhCiD,IACFlC,EAAmB,OACnBE,EAAe,0CAEhB,CAACL,IA8BF,iCACE,oBAAIf,UAAU,cAAd,iCACA,cAAC,EAAD,UACGe,EAAa4B,KAAI,SAACV,EAAQW,GAAT,OAChB,cAAC,EAAD,CAEE1C,OAAmB,MAAX+B,EAAiB,EAAI,EAC7B9B,SAAqB,MAAX8B,EAAiB,EAAI,EAC/B5B,QAAS,kBA7BC,SAACuC,GAInB,GAFE7B,EAAaiB,QAAO,SAACC,GAAD,OAAuB,OAAXA,KAAiBC,OAAS,IAAM,EAEhD,CAChB,IAAMoB,EAAcvC,EACyB,OAAvBuC,EAAYV,KAEhCU,EAAYV,GAAS,IACrB5B,EAAgB,YAAIsC,MAoBDQ,CAAYlB,IAC3BmB,MACsB,WAApB9C,EACI,CAAE+C,OAAQ,mBACU,aAApB/C,EACA,CAAE+C,OAAQ,iBACU,QAApB/C,EACA,CAAE+C,OAAQ,sBAAuBC,MAAO,aACxC,IAXDrB,QAgBX,cAAC,EAAD,CAAQvC,QA5BU,WACpBW,EAAgBP,KAChBS,EAAmB,IACnBE,EAAe,KAyBmBd,KAAK,aACrC,cAAC,EAAD,CAAaE,QAASW,IACtB,wBAAOnB,UAAU,6BAAjB,UACE,gCACE,+BACE,oBAAIkE,MAAM,QACV,oBAAIA,MAAM,MAAV,oBACA,oBAAIA,MAAM,MAAV,2BAGJ,gCACE,+BACE,oBAAIlE,UAAU,UAAUkE,MAAM,MAA9B,0BAGA,oBAAIlE,UAAU,UAAd,SAAyBqB,EAAOnB,SAChC,oBAAIF,UAAU,UAAd,SAAyBqB,EAAOlB,mBAItC,qBAAKH,UAAU,eAAf,SACE,mBAAGmE,OAAO,SAASC,IAAI,aAAaC,KAAK,+BAAzC,SACE,wBAAQrE,UAAU,eAAlB,gCCxMVsE,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.18248e0c.chunk.js","sourcesContent":["const GameBoard = (props) => {\n  return <div className=\"game-board\" {...props} />\n}\n\nexport default GameBoard\n","const GameBoardSquare = (props) => (\n  <div className=\"game-board-square\" {...props}>\n    {props.player ? 'X' : props.computer ? 'O' : ''}\n  </div>\n)\n\nexport default GameBoardSquare\n","// New Game Button for the game using Bootstrap\nconst Button = (props) => {\n  return (\n    <button\n      className=\"btn btn-primary btn-lg btn-block\"\n      onClick={props.onClick}\n    >\n      {props.text}\n    </button>\n  )\n}\n\nexport default Button\n","const GameMessage = (props) => {\n  return (\n    <div className=\"game-message center-block text-center\">\n      <h1>{props.message}</h1>\n    </div>\n  )\n}\n\nexport default GameMessage\n","import './App.css'\nimport GameBoard from './components/GameBoard'\nimport GameBoardSquare from './components/GameBoardSquare'\nimport { useState, useEffect } from 'react'\nimport Button from './components/Button'\nimport GameMessage from './components/GameMessage'\nimport axios from 'axios'\n\nconst totalSquares = () => new Array(9).fill(null)\n\nconst winLines = [\n  [0, 1, 2],\n  [3, 4, 5],\n  [6, 7, 8],\n  [0, 3, 6],\n  [1, 4, 7],\n  [2, 5, 8],\n  [0, 4, 8],\n  [2, 4, 6]\n]\n\nfunction App() {\n  const [boardSquares, setBoardSquares] = useState(totalSquares())\n  const [highlightWinner, setHighlightWinner] = useState('')\n  const [gameMessage, setGameMessage] = useState('')\n  const [scores, setScores] = useState({\n    player: 0,\n    computer: 0\n  })\n\n  /**\n   * @description - GET scores on page load\n   */\n  useEffect(() => {\n    axios.get('http://localhost:3001/scores').then((res) => {\n      console.log('PLAYER:', res.data.slice(-1)[0].player)\n      setScores({\n        player: res.data.slice(-1)[0].player,\n        computer: res.data.slice(-1)[0].computer\n      })\n    })\n  }, [])\n\n  /**\n   * @description - POST scores only if scores have changed\n   */\n  useEffect(() => {\n    if (boardSquares.filter((square) => square !== null).length % 2 === 0) {\n      axios.post('http://localhost:3001/scores', scores)\n    }\n  }, [scores])\n\n  useEffect(() => {\n    const isAITurn =\n      boardSquares.filter((square) => square !== null).length % 2 === 1\n    const matchLines = (a, b, c) => {\n      return winLines.filter((squareIndexes) => {\n        const squareValues = squareIndexes.map((index) => boardSquares[index])\n        return (\n          JSON.stringify([a, b, c].sort()) ===\n          JSON.stringify(squareValues.sort())\n        )\n      })\n    }\n    const avaiableSquares = boardSquares\n      .map((square, index) => (square === null ? index : null))\n      .filter((val) => val !== null)\n\n    const playerWon = matchLines('X', 'X', 'X').length > 0\n    const computerWon = matchLines('O', 'O', 'O').length > 0\n    const tie = boardSquares.filter((square) => square === null).length === 0\n\n    const moveAITo = (index) => {\n      const fillSquares = boardSquares\n      fillSquares[index] = 'O'\n      setBoardSquares([...fillSquares])\n    }\n\n    /**\n     * @description - AI logic\n     */\n\n    if (isAITurn) {\n      const winingLines = matchLines('O', 'O', null)\n      if (winingLines.length > 0) {\n        const winIndex = winingLines[0].filter(\n          (index) => boardSquares[index] === null\n        )[0]\n        moveAITo(winIndex)\n        return\n      }\n\n      const lineBlock = matchLines('X', 'X', null)\n      if (lineBlock.length > 0) {\n        const blockIndex = lineBlock[0].filter(\n          (index) => boardSquares[index] === null\n        )[0]\n        moveAITo(blockIndex)\n        return\n      }\n\n      const lineFill = matchLines('O', null, null)\n      if (lineFill.length > 0) {\n        moveAITo(lineFill[0].filter((index) => boardSquares[index] === null)[0])\n        return\n      }\n\n      const randomIndex =\n        avaiableSquares[Math.ceil(Math.random() * avaiableSquares.length)]\n      moveAITo(randomIndex)\n    }\n\n    if (playerWon) {\n      setHighlightWinner('player')\n      setGameMessage('😼 Won!')\n      setScores((prevScores) => ({\n        ...prevScores,\n        player: prevScores.player + 1\n      }))\n    }\n    if (computerWon) {\n      setHighlightWinner('computer')\n      setGameMessage('🤖 Lost!')\n      setScores((prevScores) => ({\n        ...prevScores,\n        computer: prevScores.computer + 1\n      }))\n    }\n    if (tie) {\n      setHighlightWinner('tie')\n      setGameMessage('🤷‍♂️ Tie!')\n    }\n  }, [boardSquares])\n\n  /**\n   * @description - Game rules\n   *\n   * @param index - Must be a empty square to be able to play\n   *\n   * @returns - Player move\n   */\n  const handleClick = (index) => {\n    const isPlayerTurn =\n      boardSquares.filter((square) => square !== null).length % 2 === 0\n\n    if (isPlayerTurn) {\n      const fillSquares = boardSquares\n      const isSquareEmpty = fillSquares[index] === null\n      if (isSquareEmpty) {\n        fillSquares[index] = 'X'\n        setBoardSquares([...fillSquares])\n      }\n    }\n  }\n\n  const handleNewGame = () => {\n    setBoardSquares(totalSquares())\n    setHighlightWinner('')\n    setGameMessage('')\n  }\n\n  return (\n    <main>\n      <h1 className=\"text-center\"> Hooked Tic-Tac-Toe</h1>\n      <GameBoard>\n        {boardSquares.map((square, index) => (\n          <GameBoardSquare\n            key={index}\n            player={square === 'X' ? 1 : 0}\n            computer={square === 'O' ? 1 : 0}\n            onClick={() => handleClick(index)}\n            style={\n              highlightWinner === 'player'\n                ? { border: '2px solid green' }\n                : highlightWinner === 'computer'\n                ? { border: '2px solid red' }\n                : highlightWinner === 'tie'\n                ? { border: '2px solid lightgray', color: 'lightgray' }\n                : {}\n            }\n          />\n        ))}\n      </GameBoard>\n      <Button onClick={handleNewGame} text=\"New Game\" />\n      <GameMessage message={gameMessage} />\n      <table className=\"scores table table-striped\">\n        <thead>\n          <tr>\n            <th scope=\"col\"></th>\n            <th scope=\"col\">Player</th>\n            <th scope=\"col\">Computer</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <th className=\"bg-info\" scope=\"row\">\n              🏆\n            </th>\n            <td className=\"bg-info\">{scores.player}</td>\n            <td className=\"bg-info\">{scores.computer}</td>\n          </tr>\n        </tbody>\n      </table>\n      <div className=\"game-records\">\n        <a target=\"_blank\" rel=\"noreferrer\" href=\"http://localhost:3001/scores\">\n          <button className=\"btn btn-info\">Last Games</button>\n        </a>\n      </div>\n    </main>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}